// Item 46
// Page: 232 타입 선언과 관련된 세가지 버전 이해하기

// 의존성 관리는 사실 매우 힘든일
// 그래서 보통은 라이브러리를 추가할 뿐이지 라이브러리의 전이적인 의존성이 호환되는지 생각해본적 없을것입니다.
// ts 는 의존성을 해결해주기보다는 약간더 복잡하게 만듭니다. 
// 세가지 사항을 고려해야 하기 때문입니다.

// 라이브러리의 버전
// 타입선언의 버전
// ts 의 버전

// 세가지 버전중 하나라도 맞지 않으면 엉뚱한 오류가 발생할수 있습니다.
// 만약 이렇게 발생하는 오류가 있다면 ts 의 라이브러리 관리 메커니즘을 이해하고 있는게 중요합니다.

// 만약 리엑트를 설치한다고 하면 다음과 같은 상황을 볼 수 있습니다.

// npm install react
`react@16.8.6`

// npm install --save-dev @types/react
`@types/react@16.8.19`

// 메이저와 마이너 버전은 일치하지만 (16.8) 패치 버전은 일치하지 않는것에 주목해야합니다 (.6 과 .19)
// 일반적으로 메이저와 마이너 버전이 일치한다면 api 사양이 호환된다는것을 의미합니다.
// 패치 버전은 타입 자체의 버그나 누락으로 인한 수정과 추가에 따른것입니다.

// 이런식으로 라이브러리와 타입이 각각 관리되는 경우 버전이 맞지 않아 문제가 발생하는데 타입 파일이 최신으로 준비되지 않는경우
// 타입보강을 이용하여 새함수와 메서드를 직접 추가할 수 있습니다.

// 반대로 타입파일이 라이브러리 보다 더 최신인경우는 타입파일의 버전을 내리는 방법을 생각해 볼수있습니다.

// 프로젝트에서 사용하는 타입스크립트 보다 설치한라이브러리의 타입버전이 더 최신인경우 오류가 발생할 수도 있습니다.
// 이런경우 프로젝트의 타입스크립트 버전을 높이거나, 라이브러리의 버전을 낮추거나, declare module 로 라이브러리의 타입선언을 없앨수있습니다.