// Item 43
// Page : 몽키패치 보다는 안전한 타입을 사용하기

// 자바스크립트는 객체나 클래스에 임의의 속성 (필드) 를 추가할 수 있을만큼 유연한 언어입니다.
// 이러한 특직은 종종 window 나 document 에 속성을 추가 하여 전역변수처럼 사용하게 만들수있습니다

// 전연변수를 사용할때 주의해야 할점은 은연중에 서로 멀리 떨어져 보이는 데이터 사이의 의존성을 만들 수 있고
// 함수 호출에 의한 사이드이펙트를 조심해야 합니다.

// 타입스크립트는 이미 알려진 Document 라는 객체의 이미 존재하는 속성은 알고 있지만,
// 새롭게 추가하려는 속성은 알지 못하므로 에러가 발생합니다.
document.choco = "dark-choco";

// 이러한 속성추가 오류를 우회 하는 방법으로는 any 단언이 있지만 안전하지 않습니다.
// 타입체커와 언어서비스가 불가능하기 때문입니다.
(document as any).choco = "dark-choco";
document.choco; // 값에 접근하려면 타입체커가 오류를 나타냅니다.

// 다른 방법으로는 보강 기능이 있습니다. 같은이름의 인터페이스를 연속해서 선언하면
// 덮어 씌워지는것이 아니라 속성이 추가되는 기능입니다

// interface Document {
//   /**초코렛 */
//   choco: string;
// }

document.choco; // (참조: 위의 인터페이스 주석 해제) 이제는 접근할 수 있습니다.

// 이러한 보강으로 얻는 이점으로는
// 1. 타입이 더 안전해집니다. 타입체커는 오타나 잘못된 타입의 할당 오류를 잡아냅니다.
// 2. 속성에 주석을 붙일 수 있습니다.
// 3. 자동완성 기능을 사용할수 있습니다.
// 4. 몽키패치가 어떤 부분에 적용되었는지 정확한 기록이 남습니다. //질문: ?? 기록이 남는다는건 인터페이스를 보강했다는 말일까요.

// 모듈 관점에서 바라보자면 global 선언을 추가해야합니다.
declare global {
  interface Document {
    choco: string;
  }
}

// 질문: page223 .> 애플리케이션이 실행되는 동안 속성을 할당하면, 실행 시점에서 보강을 적용할 방법이 없습니다. <
// 보강은 타입스크립트이고 애플리케이션 실행은 런타임인데, 런타임시점에 타입스크립트를 적용할 방법이 없다는말은 당연한 말인데 왜 다루는건지

// 타입 단언을 더 구체적으로 활용하기 (any 단언 사용하지 않기)
// 보강이 아닌 새로운 인터페이스를 만들고 이 인터페이스를 단언용으로 사용할것입니다.
interface MonkeyPatch extends Document {
  /**색깔 */
  color: string;
}

// any 단언과 비교해서 특정한 타입의 타입체크와 자동완성 기능을 사용할수 있습니다.
// 전체적인 Document 타입에 대한 조작을 피할수 있습니다.
(document as MonkeyPatch).color = "brown";
(document as MonkeyPatch).color = 1; // 타입오류


// 요약 전역 변수나 DOM 에 데이터를 저장하지 말고, 분리하여 사용해야 한다.
// 내장 타입에 데이터를 보관 하려면 보강이나 사용자 정의 인터페이스로 단언 한다.
// 보강이 모듈영역에서 문제를 일으킬수 있다는 점을 이해해야 한다.