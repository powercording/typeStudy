// 아이템 10
// Page : 57 객체 래퍼 타입 피하기

// js 에는 기본형 7가지 타입이 존재한다.
// string, number, boolean, null, undefined, symbol, bigint
// 기본형은 메서드를 가지고 있지 않지만 어째서 인지 우리들은 다음과 같은 매서드를 호출한다.
"string".toUpperCase();

// 이러한 현상은 자바스크립트 엔진이 기본형을 객체처럼 사용할 수 있도록 하는 객체 래퍼 타입을 제공하기 때문이다.
// 기본형에 메서드를 호출 할 때 기본형을 감싸는 객체가 생성되고 메서드를 호출한 후 객체는 사라진다.
// 이러한 객체들도 타입을 가지는데 이를 객체 래퍼타입이라 하며
// String, Number, Boolean, Symbol, BigInt  가 있다.  대문자로 시작하는 특징을 가지고 있다.

// 기본형에 접근하려 할때 이러한 래퍼 객체 덕분에 이상한 동작들도 수행가능해진다.
let a = "a";
a.name = "kim"; // 이 동작은 브라우저 콘솔에서 확인 가능하다. ts 에서는 허용하지 않음.

// 이러한 기본형 타입을 명시하려 할때 객체 래퍼 타입을 사용하지 않도록 주의해야 한다.
// string 을 String 으로 잘못 타이핑 하기 쉽다.
function isGreeting(phrase: String) {
  return ["hello", "hi"].includes(phrase);
} //string 은 String 에 할당 가능하지만 String 은 string 에 할당 할수 없음.
// 대부분의 라이브러리 타입스크립트가 제 공하는 타입 선언은 전부 기본형으로 되어 있음.

// 기본형 데이터에 메소드를 제공하기 위한 객체 래퍼 타입이 어떻게 쓰이는지 이해 해야 한다.
// 객체 래퍼 타입을 직접 사용 하거나 인스턴스를 생성하는것은 피해야 한다. 
